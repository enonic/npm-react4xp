#───────────────────────────────────────────────────────────────────────────────
# A template version of this, with upated properties and explanations, can
# always be found in the react4xp NPM package:
#  node_modules/react4xp/examples/app.cfg (after installing)
# or:
#  https://github.com/enonic/enonic-react4xp/blob/master/examples/app.cfg
#───────────────────────────────────────────────────────────────────────────────


#───────────────────────────────────────────────────────────────────────────────
# Override the maximum SSR thread/engine count.
#───────────────────────────────────────────────────────────────────────────────
#
# Default value (if commented out): null, which means no limit on number of
# threads. If set as a number above 0, limits the number of SSR engines that are
# available for simultaneous server-side rendering.
#
# It's usually not necessary to set a limit on this, the java thread model will
# limit it to the amount of available cores (and maybe multiplied, depending on
# CPU hyperthreading etc).
# However, each SSR engine will load the assets it needs for rendering into
# memory, in its own independent nashorn engine and memory space.
# And for performance reasons, these engines will be re-used as much as
# possible, trying to avoid initializing new engines.
# In other words, the memory used will NOT be cleared and made available after a
# rendering, but the engines will keep already-loaded assets in memory. And in
# the long run, the result will probably be that every engine will keep every
# compiled react asset in memory.
# If this ever becomes a problem, the ssrMaxThreads can be used to set a limit
# on this.
#
# react4xp.ssr.maxThreads = 0


#───────────────────────────────────────────────────────────────────────────────
# Override SSR engine settings.
#───────────────────────────────────────────────────────────────────────────────
# Ref:
# https://github.com/openjdk/nashorn/blob/main/src/org.openjdk.nashorn/share/
# classes/org/openjdk/nashorn/internal/runtime/resources/Options.properties
#
# Default settings (if commented out) is:
#  1000
#  This corresponds to:
#  --persistent-code-cache, --class-cache-size=1000
# If only a number, changes the the number in --class-cache-size=<number> in the
# default setting above.
# If that number is set to 0 (or less), persistent code cache is switched off.
# Might affect performance positively or negatively, depending on your project.
# If a full string (more than just a number): completely overrides the default
# settings.
#  Interpreted as a comma-separated list of settings, same format as the default settings above, for example:
#  --persistent-code-cache, --class-cache-size=42, --lazy-compilation
#
# react4xp.ssr.settings = 1000


#───────────────────────────────────────────────────────────────────────────────
# Hydration
#───────────────────────────────────────────────────────────────────────────────
# Hydration is enabled by default, to change the default to disbaled comment in
# the line below. One can still enable hydration in specific components.
# react4xp.hydrate = false


#───────────────────────────────────────────────────────────────────────────────
# SSR
#───────────────────────────────────────────────────────────────────────────────
# SSR is enabled by default, to change the default to disbaled comment in the
# line below. One can still enable ssr in specific components.
# react4xp.ssr = false

#───────────────────────────────────────────────────────────────────────────────
# Globals
#───────────────────────────────────────────────────────────────────────────────
# React4xp builds a globals bundle, which MUST contain all assets NEEDED to
# render server-side. By default it contains react and react-dom, but more
# assets can be added in the PROJECT_DIR/react4xp.config.js file.
#
# By default the globals bundle is also used on the client-side, but you
# can provide the REQUIRED assets on your own, for example via CDN.
#
# To disable serving the globals bundle to the client-side, uncomment this line:
# react4xp.serveGlobals = false
